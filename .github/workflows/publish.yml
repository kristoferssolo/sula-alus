name: Publish
on:
  # Trigger this workflow when a tag is pushed in the format `v1.2.3`.
  push:
    tags:
      # Pattern syntax: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "v[0-9]+.[0-9]+.[0-9]+*"
  # Trigger this workflow manually via workflow dispatch.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in the format `v1.2.3`'
        required: true
        type: string
jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/audit@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  publish-crate:
    name: Publish to crates.io
    needs: [audit]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: cargo-release Cache
        id: cargo_release_cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-release
          key: ${{ runner.os }}-cargo-release
      - run: cargo install cargo-release
        if: steps.cargo_release_cache.outputs.cache-hit != 'true'
      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_API_TOKEN }}
      - name: "cargo release publish"
        run: |-
          cargo release \
            publish \
            --workspace \
            --all-features \
            --allow-branch HEAD \
            --no-confirm \
            --no-verify \
            --execute
  github-release:
    name: Create GitHub Release
    needs: [audit]
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Prepare assets
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../sula-alus-${{ matrix.target }}.zip sula-alus.exe
          else
            tar czf ../../sula-alus-${{ matrix.target }}.tar.gz sula-alus
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sula-alus-${{ matrix.target }}
          path: target/sula-alus-${{ matrix.target }}.*
          compression-level: 0
  create-release:
    needs: [github-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/sula-alus-*
          generate_release_notes: true
  publish-aur:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get version and description
        id: metadata
        run: |
          DESCRIPTION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].description')
          VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "DESCRIPTION=${DESCRIPTION}" >> $GITHUB_OUTPUT
      - name: Get SHA256 sum
        id: sha256
        run: |
          curl -LO "${{ github.server_url }}/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/sula-alus-x86_64-unknown-linux-gnu.tar.gz"
          echo "SHA256=$(sha256sum sula-alus-x86_64-unknown-linux-gnu.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      - name: Generate PKGBUILD
        run: |
          cat > PKGBUILD << 'EOF'
          # Maintainer: Kristofers Solo <dev@kristofers.xyz>
          pkgname=sula-alus-bin
          pkgver=${{ steps.metadata.outputs.VERSION }}
          pkgrel=1
          pkgdesc="${{ steps.metadata.outputs.DESCRIPTION }}"
          arch=("x86_64")
          url="https://github.com/kristoferssolo/sula-alus"
          license=("MIT" "Apache-2.0")
          provides=("sula-alus")
          conflicts=("sula-alus" "sula-alus-git")
          source=("\${url}/releases/download/v\${pkgver}/sula-alus-x86_64-unknown-linux-gnu.tar.gz")
          EOF
      - name: Update SHA256 and package function
        run: |
          echo "sha256sums=(\"${{ steps.sha256.outputs.SHA256 }}\")" >> PKGBUILD
          echo >> PKGBUILD
          cat >> PKGBUILD << 'EOF'

          prepare() {
              cd "$srcdir"
              tar xf "sula-alus-x86_64-unknown-linux-gnu.tar.gz"
          }

          package() {
              cd "$srcdir"
              install -Dm755 sula-alus "${pkgdir}/usr/bin/sula-alus"
          }
          EOF
      - name: Generate .SRCINFO
        run: |
          docker run --rm -v "$PWD":/pkg -w /pkg archlinux:base-devel bash -c '
            useradd -m builder && \
            echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
            chown -R builder:builder /pkg && \
            su builder -c "makepkg --printsrcinfo > .SRCINFO"
          '
      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v3.0.1
        with:
          pkgname: sula-alus-bin
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version ${{ steps.metadata.outputs.VERSION }}"
          ssh_keyscan_types: rsa,ecdsa,ed25519
